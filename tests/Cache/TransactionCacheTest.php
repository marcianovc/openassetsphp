<?php
namespace youkchan\OpenassetsPHP\Tests\Cache;
use PHPUnit\Framework\TestCase;
use youkchan\OpenassetsPHP\Cache\TransactionCache;
use youkchan\OpenassetsPHP\Protocol\OutputType;

class TransactionCacheTest extends TestCase
{

    public function setUp(){
        $path = "../test.db";
        if(file_exists($path)) {
            unlink($path);
        }
        $this->transaction_cache = new TransactionCache($path);
        $this->transaction_id = "7ed86d1c2824ea14bf8a2fe27202a1d229a4f58db52e2ba1ed13cf36765deaac";
        $this->serialized_transaction = "0100000006106948b5ad069587da671acd3a1c71059e196516214645bd4728adb716dd8768010000006b483045022100b9e0cb64360c13299be81f2a8c07334e2913f2273f75ccfb919d48b83488ecb00220791aa7e596559be4acc9ce92141775b54d2c4017ddc7a6c2fd37b427c1d07d8c012102f61508529d9676dac201761069ba10eaf546586874e136b02e5d31e9880b5a2affffffff106948b5ad069587da671acd3a1c71059e196516214645bd4728adb716dd8768020000006a473044022030bf90882f9d22dfb13c782ecbe27ada99f8339a2ad780f0780691625c95f426022005246378a8d26ff56ceb6da210fa9e773b0639e12795f51c3cf96986be74c681012102f61508529d9676dac201761069ba10eaf546586874e136b02e5d31e9880b5a2affffffff106948b5ad069587da671acd3a1c71059e196516214645bd4728adb716dd8768030000006b483045022100fba1072d96a3972838dc1503de4509dd4b8c2ba365bea68a8d5c267b2104ede50220688f2e3d4f529b3921884d3b22f6ec26486ce432a8caaf20e45b0d24501d8ffc012102f61508529d9676dac201761069ba10eaf546586874e136b02e5d31e9880b5a2affffffff6f2db9cb1eac348ae672c39b92d5ef290c3cee89b3f06776e40558a9dd6cce9e010000006b483045022100c47feb60db13996e8c2bb46f7053733389385499b17c8ff10f5a23b21cc96be602200a4d4f66115a1b009c64b33e89b867afe3bcc516dda67e5cfe10c510f3465483012102f61508529d9676dac201761069ba10eaf546586874e136b02e5d31e9880b5a2affffffff6f2db9cb1eac348ae672c39b92d5ef290c3cee89b3f06776e40558a9dd6cce9e020000006b48304502210086eb2186d4728b641b392aecaef752a5938e791e4a5b8aa4b6c31a05f88c25c802202cfdc7ce96624f2f667854c12abc969cbd9a31197b7f557cf4d94ee3a1e4e9a0012102f61508529d9676dac201761069ba10eaf546586874e136b02e5d31e9880b5a2affffffff5caa4a08ae0ef0e765e95d8fca4d53bd6e3d5496f941cb8a42f1be453ba78e30010000006a47304402201285dcba61a3524ff6146157a14b354d0b8ed4480793186ccb9fb4196b68d49302205587cad2dc7f1d7cd1044cf5705748810388313182893a82140e8657cbe1a48a012102f61508529d9676dac201761069ba10eaf546586874e136b02e5d31e9880b5a2affffffff0600000000000000000c6a0a4f41010004321604020058020000000000001976a914fa7491ee214ab15241a613fb5906f6df996bb08b88ac58020000000000001976a9147d8dd16cc3413a64a9964c91cb0ee9358ab1dff688ac58020000000000001976a914fa7491ee214ab15241a613fb5906f6df996bb08b88ac58020000000000001976a9147d8dd16cc3413a64a9964c91cb0ee9358ab1dff688ace8610100000000001976a9147d8dd16cc3413a64a9964c91cb0ee9358ab1dff688ac00000000";
    }

    public function test_get_set() {
        $result = $this->transaction_cache->get($this->transaction_id);
        $this->assertSame($result, null);
        $this->transaction_cache->set($this->transaction_id, $this->serialized_transaction); 
        $result = $this->transaction_cache->get($this->transaction_id);
        $this->assertEquals($result, $this->serialized_transaction);
    }

}
